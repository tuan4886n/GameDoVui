name: Flask CI/CD

on:
  push:
    branches:
      - main # Trigger pipeline when there is commit to the "main" branch
  pull_request:
    branches:
      - main # Trigger pipeline when there is pull request to the "main" branch

jobs:
  test:
    runs-on: ubuntu-latest # Run ubuntu environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Clone repo into runner

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.21"

      - name: Install dependencies # Install dependencies of app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest tests # Run Pytest to checkout code

      - name: Install frontend validation tools
        run: |
          npm install -g eslint

      - name: Test JavaScript
        run: eslint --config eslint/eslint.config.js assets/js/

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest

      - name: Set environment variables for CI/CD
        run: |
          echo "DATABASE_USER=${{ vars.DATABASE_USER }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_HOST=${{ vars.DATABASE_HOST }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ vars.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "DATABASE_PORT=${{ vars.DATABASE_PORT }}" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://${{ vars.DATABASE_USER }}:${{ secrets.DATABASE_PASSWORD }}@${{ vars.DATABASE_HOST }}:${{ vars.DATABASE_PORT }}/${{ vars.DATABASE_NAME }}" >> $GITHUB_ENV

      - name: Validate Docker Compose syntax
        run: docker compose config

      - name: Start containers
        run: docker compose up -d

      - name: Kết nối PostgreSQL
        run: |
          export PGPASSWORD="${{ secrets.DATABASE_PASSWORD }}"
          timeout 60 psql -h $DATABASE_HOST -p $DATABASE_PORT -U $DATABASE_USER -d postgres -c "SELECT 1;"

      - name: Test Flask API response
        run: curl -X GET http://localhost:8080/health

      - name: Kiểm tra kết nối PostgreSQL từ Flask
        run: curl -X GET http://localhost:8080/test_db

      - name: Check Flask API logs
        run: docker logs flask_api

      - name: Install security tools (Bandit)
        run: pip install bandit

      - name: Run security check (Bandit)
        run: bandit -r app/

      - name: Cleanup containers
        if: always()
        run: docker compose down
